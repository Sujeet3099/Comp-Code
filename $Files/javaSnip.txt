{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Java Fast IO for Primary Code": {
		"scope": "java",
		"prefix": "javacode",
		"body": [
			"import java.io.*;",
			"import java.util.*;",
			"",
			"public class $TM_FILENAME_BASE {",
			"    static PrintWriter out = null;",
			"    public static void main(String[] args) {",
			"        FastReader in = new FastReader(\"input.txt\");",
			"        //FastReader in = new FastReader();",
			"        try {",
			"            out = new PrintWriter(new FileOutputStream(\"output.txt\"));",
			"            //out = new PrintWriter(new OutputStreamWriter(System.out));",
			"        } catch (Exception e) {",
			"            e.printStackTrace();",
			"        }",
			"",
			"        // code goes here",
			"        $0",
			"",
			"        out.close();",
			"    }",
			"          ",
			"    static class FastReader {",
			"        BufferedReader br;",
			"        StringTokenizer st;",
			"        public FastReader() {",
			"            try {",
			"                br = new BufferedReader(new InputStreamReader(System.in));",
			"            } catch (Exception e) {",
			"                e.printStackTrace();",
			"            }",
			"        }",
			"        public FastReader(String file) {",
			"            try {",
			"                br = new BufferedReader(new FileReader(file));",
			"            } catch (Exception e) {",
			"                e.printStackTrace();",
			"            }",
			"        }",
			"        String next() {",
			"            while (st == null || !st.hasMoreElements()) {",
			"                try {",
			"                    st = new StringTokenizer(br.readLine());",
			"                } catch (IOException e) {",
			"                    e.printStackTrace();",
			"                }",
			"            }",
			"            return st.nextToken();",
			"        }",
			"        int nextInt() {",
			"		return Integer.parseInt(next());",
			"	}",
			"	long nextLong() {",
			"		return Long.parseLong(next());",
			"	}",
			"	double nextDouble() {",
			"		return Double.parseDouble(next());",
			"	}",
			"        String nextLine() {",
			"            String str = \"\";",
			"            try {",
			"                str = br.readLine();",
			"            } catch (IOException e) {",
			"                e.printStackTrace();",
			"            }",
			"            return str;",
			"        }",
			"    }",
			"}"
		],
		"description": "java fast IO for primary"
	}
}